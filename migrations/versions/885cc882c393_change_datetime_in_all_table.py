"""change datetime in all table

Revision ID: 885cc882c393
Revises: 99e553435d0d
Create Date: 2025-06-18 14:07:46.986301

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "885cc882c393"
down_revision = "99e553435d0d"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("comment", schema=None) as batch_op:
        batch_op.alter_column(
            "date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
        )

    with op.batch_alter_table("fidelity_reward_log", schema=None) as batch_op:
        batch_op.alter_column(
            "date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=True,
        )

    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.alter_column(
            "consent_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=True,
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.alter_column(
            "consent_date",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("fidelity_reward_log", schema=None) as batch_op:
        batch_op.alter_column(
            "date",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )

    with op.batch_alter_table("comment", schema=None) as batch_op:
        batch_op.alter_column(
            "date",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
        )

    # ### end Alembic commands ###
